@page "/invtrans"
@inject HttpClient http;

<h3>Inventory Transaction</h3>


<input @bind="@_goodsId" placeholder="Id" />
<input @bind="@_transAmount" placeholder="Amount" />
<button @onclick="@StockIn">
    StockIn
</button>
<button @onclick="@StockOut">
    StockOut
</button>
<button @onclick="@ShowDetails">
    Show Details
</button>
<br />
<br />

<p>
    Current Inventory is @_currentInventory &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</p>

<p>
    Transaction History &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</p>
<table class="table">
    <thead>
        <tr>
            <th>Goods Id</th>
            <th>Transaction Type</th>
            <th>Amount</th>
        </tr>
    </thead>
    <tbody>

        @if (_allTransHist != null)
        {
            @foreach (var item in _allTransHist)
            {
                <tr>
                    <td>@item.GoodsId</td>
                    <td>@item.TransactionType</td>
                    <td>@item.Amount</td>
                </tr>
            }
        }
    </tbody>
</table>


@code {
    private readonly string _host = $"{Data.Host}/InventoryTransaction";
    private long? _goodsId;
    private uint? _transAmount;
    private uint? _currentInventory;

    private GoodsInventoryTransactionEvent[] _allTransHist;

    private async Task GetAllTransHist()
    {
        if (_goodsId == null)
            return;
        var t = await http.GetJsonAsync<GoodsInventoryTransactionEvent[]>($"{_host}/All?id={_goodsId.GetValueOrDefault()}");
        _allTransHist = t.ToArray();
    }

    private async Task StockIn()
    {
        await Trans("in");
        await Task.Delay(TimeSpan.FromMilliseconds(200));
        await GetAllTransHist();
        await GetCurrentInventory();
    }

    private async Task StockOut()
    {
        await Trans("out");
        await Task.Delay(TimeSpan.FromMilliseconds(200));
        await GetAllTransHist();
        await GetCurrentInventory();
    }

    private async Task Trans(string transType)
    {
        if (_goodsId == null || _transAmount == null)
            return;
        if (transType != "in" && transType != "out")
            return;

        await http.PostJsonAsync($"{_host}/Trans", new GoodsInventoryTransactionEvent
        {
            GoodsId = _goodsId.GetValueOrDefault(),
            TransactionType = transType,
            Amount = _transAmount.GetValueOrDefault()
        });
    }

    private async Task GetCurrentInventory()
    {
        if (_goodsId == null)
            return;
        _currentInventory = await http.GetJsonAsync<uint>($"{_host}/GetCurrentInventory?id={_goodsId.GetValueOrDefault()}");
    }

    private async Task ShowDetails()
    {
        await GetCurrentInventory();
        await GetAllTransHist();
    }

}